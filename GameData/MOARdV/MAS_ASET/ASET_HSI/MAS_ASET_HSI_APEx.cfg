PROP
{
	name = MAS_ASET_HSI_APEx
	  
	MODEL
	{
		model = ASET/ASET_Avionics/ClassicPack/ASET_HSI/ASET_HSI
	}

	MODULE
	{
		name = MASComponent

		COLLIDER_EVENT
		{
			name = Course Dial Slow Plus
			collider = HSI_CRS_INC_SLOW_Collider_Obj
			dragSensitivity = 0.3
			onDragX = fc.AddPersistentWrapped("MAS_CRS_INPUT", %DRAG% * 10, 0, 360)
		}
		
		COLLIDER_EVENT
		{
			name = Course Dial Fast Plus
			collider = HSI_CRS_INC_FAST_Collider_Obj
			dragSensitivity = 0.3
			onDragX = fc.AddPersistentWrapped("MAS_CRS_INPUT", %DRAG% * 50, 0, 360)
		}

		COLLIDER_EVENT
		{
			name = Course Dial Slow Minus
			collider = HSI_CRS_DEC_SLOW_Collider_Obj
			dragSensitivity = 0.3
			onDragX = fc.AddPersistentWrapped("MAS_CRS_INPUT", %DRAG% * 10, 0, 360)
		}
		
		COLLIDER_EVENT
		{
			name = Course Dial Fast Minus
			collider = HSI_CRS_DEC_FAST_Collider_Obj
			dragSensitivity = 0.3
			onDragX = fc.AddPersistentWrapped("MAS_CRS_INPUT", %DRAG% * 50, 0, 360)
		}
		
		COLLIDER_EVENT
		{
			name = Heading Bug Slow Plus
			collider = HSI_HDG_INC_SLOW_Collider_Obj
			dragSensitivity = 0.3
			onDragX = fc.AddPersistentWrapped("%AUTOID%_HDG_INPUT", %DRAG% * 10, 0, 360)
		}
		
		COLLIDER_EVENT
		{
			name = Heading Bug Fast Plus
			collider = HSI_HDG_INC_FAST_Collider_Obj
			dragSensitivity = 0.3
			onDragX = fc.AddPersistentWrapped("%AUTOID%_HDG_INPUT", %DRAG% * 50, 0, 360)
		}

		COLLIDER_EVENT
		{
			name = Heading Bug Slow Minus
			collider = HSI_HDG_DEC_SLOW_Collider_Obj
			dragSensitivity = 0.3
			onDragX = fc.AddPersistentWrapped("%AUTOID%_HDG_INPUT", %DRAG% * 10, 0, 360)
		}
		
		COLLIDER_EVENT
		{
			name = Heading Bug Fast Minus
			collider = HSI_HDG_DEC_FAST_Collider_Obj
			dragSensitivity = 0.3
			onDragX = fc.AddPersistentWrapped("%AUTOID%_HDG_INPUT", %DRAG% * 50, 0, 360)
		}
		
		TRANSLATION
		{
			name = Glideslope Flag
			transform = ASET_HSI_GS_Flag_Obj
			startTranslation = 0,0,-0.01
			endTranslation = 0,0,0.0
			variable = fc.Conditioned(nav.GetILSGlideSlopeValid(1 + fc.GetPersistentAsNumber("DME_1_HSI_SOURCE_SELECTOR"), 5))
			blend = true
			speed = 10.0
		}
		
		ROTATION
		{
			name = NAV Flag
			transform = ASET_HSI_NAV_ErrorFlag_Obj
			startRotation = 0, 0, 0
			endRotation = 0, -30, 0
			variable = fc.Conditioned(nav.GetNavAidType(1 + fc.GetPersistentAsNumber("DME_1_HSI_SOURCE_SELECTOR")))
			range = 0, 1
			blend = true
			speed = 10.0
		}
		
		ROTATION
		{
			name = Off Flag
			transform = ASET_HSI_OFF_Flag_Obj
			startRotation = 0, 0, 0
			endRotation = 0, 30, 0
			variable = fc.Conditioned(1)
			range = 0, 1
			blend = true
			speed = 10.0
		}
		
		ROTATION
		{
			name = Heading Bug Animator
			transform = ASET_HSI_Heading_Bug_loc
			startRotation = 0, 0, 0
			endRotation = 0, 360, 0
			variable = fc.Conditioned(fc.GetPersistentAsNumber("%AUTOID%_HDG_INPUT"))
			longPath = true
			range = 0, 360
			modulo = 360
			blend = true
			speed = 0.5
		}
		
		ROTATION
		{
			name = Course Select Animator
			transform = ASET_HSI_COURSE_Assembly_Loc
			startRotation = 0, 0, 0
			endRotation = 0, 360, 0
			variable = fc.Conditioned(fc.GetPersistentAsNumber("MAS_CRS_INPUT"))
			longPath = true
			range = 0, 360
			modulo = 360
			blend = true
			speed = 10.0
		}
		
		ROTATION
		{
			name = Main Assembly Animator
			transform = ASEY_HSI_MainRotation_Loc	//spelling err in model
			startRotation = 0, 0, 0
			endRotation = 0, -360, 0
			variable = fc.Conditioned(fc.Heading())
			longPath = true
			range = 0, 360
			modulo = 360
			blend = true
		}
		
		ROTATION
		{
			name = CDI Offset Animator
			transform = ASET_HSI_CDI_Rot_Loc
			startRotation = 0, 0, 10
			endRotation = 0, 0, -10
			variable = MAS_APEx_HSI_Select_CDI_Source(1 + fc.GetPersistentAsNumber("DME_1_HSI_SOURCE_SELECTOR"))		//HSI_Select_CDI_Source_APEx
			range = -10, 10
			blend = true
			speed = 0.5
		}
		
		TRANSLATION
		{
			name = Glideslope Needle Animator
			transform = ASET_HSI_GS_Pointer_Obj
			startTranslation = 0, 0, -0.0203
			endTranslation = 0, 0, 0.0203
			variable = fc.Conditioned(nav.GetILSGlideSlopeError(1 + fc.GetPersistentAsNumber("DME_1_HSI_SOURCE_SELECTOR"), 5)))
			blend = true
			speed = 0.2
		}
		
		ROTATION
		{
			name = Course Knob Animator
			transform = ASET_HSI_CRS_Mode_Knob_Loc
			startRotation = 0, 0, 0
			endRotation = 0, 360, 0
			variable = fc.GetPersistentAsNumber("MAS_CRS_INPUT")
			longPath = true
			range = 0, 360
			blend = true
			modulo = 360
			speed = 0.5
		}
		
		ROTATION
		{
			name = Heading Knob Animator
			transform = ASET_HSI_HDG_Mode_Knob_Loc
			startRotation = 0, 0, 0
			endRotation = 0, 360, 0
			variable = fc.GetPersistentAsNumber("%AUTOID%_HDG_INPUT")
			longPath = true
			range = 0, 360
			blend = true
			modulo = 360
			speed = 0.5
		}
		
		TRANSLATION
		{
			name = TO/FROM Indicator Animator
			transform = ASET_HSI_FR_TO_Flag_Obj
			startTranslation = 0, 0.001, 0
			endTranslation = 0, 0.001, -0.0137
			variable = fc.Conditioned(fc.InverseLerp(nav.GetVORApproach(1 + fc.GetPersistentAsNumber("DME_1_HSI_SOURCE_SELECTOR"), fc.GetPersistentAsNumber("MAS_CRS_INPUT")), -1, 1))
			blend = true
			speed = 1.5
		}
		
		TEXT_LABEL
		{
			name = Digital Heading/Course Readout
			transform = HSI_Course_readout 
			fontSize = 11.4
			font = Digital-7 Mono
			alignment = Right
			anchor = LowerRight
			emissive = active
			variable = fc.Conditioned(1)
			activeColor = COLOR_ASET_NUMINPUT_DISPLAY_POSITIVECOLOR
			passiveColor = COLOR_ASET_NUMINPUT_DISPLAY_NEGATIVECOLOR
			text = <=1:SIP00;"---";"---"=>       <=0:000=> $&$ fc.GetPersistentAsNumber("MAS_CRS_INPUT");nav.GetDMESlantDistance(1 + fc.GetPersistentAsNumber("DME_1_HSI_SOURCE_SELECTOR"))
		}
		
		COLOR_SHIFT
		{
			name = Backlight
			transform = ASET_HSI_ReadoutScreenObj
			passiveColor = COLOR_ASET_NUMINPUT_DISPLAY_DIFFUSE_PASSIVECOLOR
			activeColor = COLOR_ASET_NUMINPUT_DISPLAY_DIFFUSE_ACTIVECOLOR
			variable = fc.Conditioned(fc.GetPersistentAsNumber("Backlight"))
			blend = true
			colorName = _Color
		}
		
		COLOR_SHIFT
		{
			name = Backlight
			transform = ASET_HSI_ReadoutScreenObj
			passiveColor = COLOR_ASET_NUMINPUT_DISPLAY_EMISSIVE_PASSIVECOLOR
			activeColor = COLOR_ASET_NUMINPUT_DISPLAY_EMISSIVE_ACTIVECOLOR
			variable = fc.Conditioned(fc.GetPersistentAsNumber("Backlight"))
			blend = true
			colorName = _EmissiveColor
		}
		
		COLOR_SHIFT
		{
			name = Backlight
			transform = ASET_HSI_HDG_Card_Obj, ASET_HSI_Labels_Obj, ASET_HSI_FR_TO_Flag_Obj, ASET_HSI_GS_Flag_Obj, ASET_HSI_NAV_ErrorFlag_Obj, ASET_ADF_HDG_Mode_Knob_Obj, ASET_HSI_GS_Pointer_Obj, ASET_HSI_CRS_KnobPict_Obj, ASET_HSI_HDG_KnobPict_Obj, ASET_HSI_HEADING_Bug_Obj, HSI_CoursePointerObj, HSI_CDI_NeedleObj, ASET_HSI_CDI_ScaleMarks_Obj
			passiveColor = COLOR_ASET_AIRCRAFTGAUGESCALE_PASSIVECOLOR
			activeColor = COLOR_ASET_AIRCRAFTGAUGESCALE_ACTIVECOLOR
			variable = fc.Conditioned(fc.GetPersistentAsNumber("Backlight"))
			blend = true
		}
	}
}
