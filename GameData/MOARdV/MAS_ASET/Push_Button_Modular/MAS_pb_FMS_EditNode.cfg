PROP
{
	name = MAS_pb_FMS_EditNode

	// Black full cap
	MODEL
	{
		model = ASET/ASET_Props/Control/Push_Button_Modular/models/pb_Full_Cap
		texture = pb_Full_Cap_Black,ASET/ASET_Props/Control/Push_Button_Modular/models/pb_Full_Cap_Black
		texture = Switch_TUMBLEDiffuse,ASET/ASET_Props/Control/Switch_Tumble/Switch_TUMBLEDiffuse
	}

	MODEL
	{
		model = ASET/ASET_Props/Control/Push_Button_Modular/models/pb_Collider
	}

	MODULE
	{
		name = MASComponent

		COLLIDER_EVENT
		{
			name = Collider
			collider = pb_Collider
			// onClick = fc.SetPersistent("%AUTOID%", 1 + fc.SetPersistent("STS_FMS_EditNodeError", 1 - fc.Select(fc.GetPersistentAsNumber("STS_FMS_EditMode"), 0 and fc.LogMessage("Orbit Mode selected"), fc.AddManeuverNode(fc.ManeuverNodeDVPrograde(), fc.ManeuverNodeDVNormal(), fc.ManeuverNodeDVRadial(), fc.UT() + fc.GetPersistentAsNumber("STS_FMSCompBuffer") - fc.TimeOfDay(fc.UT())) and fc.LogMessage("Editing Node Time"), fc.Select(fc.GetPersistentAsNumber("STS_FMS_EditMode") - 2, fc.AddManeuverNode(fc.GetPersistentAsNumber("STS_FMSCompBuffer"), fc.ManeuverNodeDVNormal(), fc.ManeuverNodeDVRadial(), fc.UT() - fc.ManeuverNodeTime()) and fc.LogMessage("Editing Prograde DV"), fc.AddManeuverNode(fc.ManeuverNodeDVPrograde(), fc.GetPersistentAsNumber("STS_FMSCompBuffer"), fc.ManeuverNodeDVRadial(), fc.UT() - fc.ManeuverNodeTime()) and fc.LogMessage("Editing Normal DV"), fc.AddManeuverNode(fc.ManeuverNodeDVPrograde(), fc.ManeuverNodeDVNormal(), fc.GetPersistentAsNumber("STS_FMSCompBuffer"), fc.UT() - fc.ManeuverNodeTime()) and fc.LogMessage("Editing Radial DV")))))
			onClick = fc.SetPersistent("%AUTOID%", 1 + fc.SetPersistent("STS_FMS_EditNodeError", 1 - FMSEditNode(fc.GetPersistentAsNumber("STS_FMS_EditMode"), fc.GetPersistentAsNumber("STS_FMSCompBuffer"), fc.ManeuverNodeDVPrograde(), fc.ManeuverNodeDVNormal(), fc.ManeuverNodeDVRadial(), -fc.ManeuverNodeTime())))
			onRelease = fc.SetPersistent("%AUTOID%", fc.SetPersistent("STS_FMS_EditNodeError", 0))
			sound = ASET/ASET_Props/Sounds/pb_Push02
			volume = 1
			// variable = fc.GetPersistentAsNumber("MAS_MJComp_On")
		}

		ANIMATION_PLAYER
		{
			name = Button press animation
			animation = pb_PushAnim
			animationSpeed = 1.0
			variable = fc.GetPersistentAsNumber("%AUTOID%")
		}

		TEXT_LABEL
		{
			name = Upper Legend
			transform = Legend_Upper
			fontSize = 3.9
			lineSpacing = 0.9
			font = Liberation Sans
			style = Bold
			alignment = Center
			anchor = MiddleCenter
			emissive = active
			blend = true
			variable = fc.Conditioned(fc.VesselFlying() * fc.GetPersistentAsNumber("Backlight"))
			activeColor = COLOR_MOARdV_ActiveBacklightText
			passiveColor = COLOR_MOARdV_UnlitText
			text = EDIT
		}

		TEXT_LABEL
		{
			name = Center Legend
			transform = Legend_Center
			fontSize = 3.9
			lineSpacing = 0.9
			font = Liberation Sans
			style = Bold
			alignment = Center
			anchor = MiddleCenter
			emissive = active
			variable = fc.Conditioned(fc.VesselFlying() * fc.GetPersistentAsNumber("Backlight"))
			activeColor = COLOR_MOARdV_ActiveBacklightText
			passiveColor = COLOR_MOARdV_UnlitText
			text = NODE
		}

		TEXT_LABEL
		{
			name = Center Legend Bullets
			transform = Legend_Center
			fontSize = 3.9
			lineSpacing = 0.9
			font = Liberation Sans
			style = Bold
			alignment = Center
			anchor = MiddleCenter
			emissive = active
			variable = fc.Conditioned(fc.VesselFlying() and fc.GetPersistentAsNumber("STS_FMS_EditMode") >= 0 and fc.ManeuverNodeExists())
			activeColor = COLOR_MOARdV_IndicatorLampGreen
			passiveColor = COLOR_MOARdV_PassiveBacklightText
			text = ●           ●
		}

		TEXT_LABEL
		{
			name = Lower Legend
			transform = Legend_Lower
			fontSize = 3.9
			lineSpacing = 0.9
			font = Liberation Sans
			style = Bold
			alignment = Center
			anchor = MiddleCenter
			emissive = active
			variable = fc.Conditioned(fc.GetPersistentAsNumber("STS_FMS_EditNodeError"))
			activeColor = COLOR_MOARdV_IndicatorLampRed
			passiveColor = COLOR_MOARdV_PassiveBacklightText
			text = ERR
		}

		// TEXT_LABEL
		// {
			// name = Lower Legend Bullets
			// transform = Legend_Lower
			// fontSize = 3.9
			// lineSpacing = 0.9
			// font = Liberation Sans
			// style = Bold
			// alignment = Center
			// anchor = MiddleCenter
			// emissive = active
			// variable = fc.Conditioned(fc.GetPersistentAsNumber("MAS_MJComp_Exec") * (fc.GetPersistentAsNumber("MAS_MJComp_Status") == 1))
			// activeColor = COLOR_MOARdV_IndicatorLampGreen
			// passiveColor = COLOR_MOARdV_PassiveBacklightText
			// text = ●           ●
		// }

	}
}
