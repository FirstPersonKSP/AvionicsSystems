MAS_PAGE
{
	name = MAS_APEx_MFD40x20_PG_Orbit		//ALCOR_MFD40x20_Orbit_V2

	onEntry = fc.SetPersistent("%AUTOID%-Page", 15)

	// Top Row configurable MFD Buttons (Left to Right):
	//  button_B - id  9
	softkey = 9, fc.SetPersistent("%AUTOID%", fc.GetPersistent("%AUTOID%-B"))
	//  button_C - id 10
	softkey = 10, fc.SetPersistent("%AUTOID%", fc.GetPersistent("%AUTOID%-C"))
	//  button_D - id 11
	softkey = 11, fc.SetPersistent("%AUTOID%", fc.GetPersistent("%AUTOID%-D"))
	//  button_E - id 12
	softkey = 12, fc.SetPersistent("%AUTOID%", fc.GetPersistent("%AUTOID%-E"))
	//  button_F - id 13
	//  button_G - id 14
	softkey = 14, fc.SetPersistent("%AUTOID%", fc.GetPersistent("%AUTOID%-G"))

	// Bottom Row MFD buttons (Left to Right):
	//  buttonR1 - id 15
	softkey = 15, fc.SetPersistent("%AUTOID%", fc.GetPersistent("%AUTOID%-R1"))
	//  buttonR2 - id 16
	softkey = 16, fc.SetPersistent("%AUTOID%", fc.SetPersistent("%AUTOID%-R2","MAS_APEx_MFD40x20_PG_OrbitDisp_V2"))	//ALCOR_MFD40x20_OrbitDisp_V2
	//  buttonR3 - id 17
	softkey = 17, fc.SetPersistent("%AUTOID%", fc.GetPersistent("%AUTOID%-R3"))
	//  buttonR4 - id 18
	softkey = 18, fc.SetPersistent("%AUTOID%", fc.GetPersistent("%AUTOID%-R4"))
	//  buttonR5 - id 19
	//  buttonR6 - id 20
	//  buttonR7 - id 21

	//  button_UP    - id 0
	//  button_DOWN  - id 1
	//  button_ENTER - id 2
	//  button_ESC   - id 3
	//  button_HOME  - id 4
	//  button_RIGHT    - id 5
	//  button_LEFT     - id 6
	//  buttonR9 (NEXT) - id 7
	//  buttonR10 (PREV)- id 8

	SUB_PAGE
	{
		name = APEx_40x20 Top Menu
	}

	SUB_PAGE
	{
		name = APEx_40x20 Bottom Menu
		position = 0, 608
	}

	TEXT
	{
		name = header
		position = 3,1
		text = BODY: [#ffff00]<=0=>[#ffffff] <=1=> $#$ fc.BodyName(fc.CurrentBodyIndex()); fc.VesselSituationName()
	}

	TEXT
	{
		name = static upper 1
		position = 3, 2
		text = ALT:
	}
	TEXT
	{
		name = static upper 2
		position = 23, 2
		text = VEL:
	}
	TEXT
	{
		name = alt
		position = 8,2
		textColor = 255, 255, 0, 255
		text = <=0,7:SIP##0.0=>m $#$ fc.Altitude()
	}
	TEXT
	{
		name = o.spd
		position = 28,2
		textColor = 255, 255, 0, 255
		text = <=0,7:SIP##0.0=>m/s $#$ fc.OrbitSpeed()
	}

	TEXT
	{
		name = Orbit Stats static 1
		position = 3,3
		text = ApA:$$$PeA:$$$ApT:$$$PeT:$$$ OP:$$$AnT:$$$DnT:
		variable = 1 - fc.VesselLanded()
	}
	TEXT
	{
		name = Orbit Stats 2
		position = 23,3
		text = ECC: [#ffff00]<=0,7:0.000=> $#$ fc.Eccentricity()
		variable = 1 - fc.VesselLanded()
	}
	LINE_STRING
	{
		name = nextNode 1
		position = 128, 96 + fc.Select(fc.VerticalSpeed() < 0, 32, 0)
		startColor = 255, 0, 255, 255
		startWidth = 3
		loop = true
		vertex = 0, 0
		vertex = 128, 0
		vertex = 128, 32
		vertex = 0, 32
		variable = 1 - fc.VesselLanded()
	}
	TEXT
	{
		name = Ap
		position = 8,3
		textColor = 255, 255, 0, 255
		text = <=0,7:SIP##0.0=>m $#$ fc.Apoapsis()
		variable = 1 - fc.VesselLanded()
	}
	TEXT
	{
		name = Pe
		position = 8,4
		textColor = 255, 255, 0, 255
		text = <=0,7:SIP##0.0=>m $#$ fc.Periapsis()
		variable = 1 - fc.VesselLanded()
	}
	LINE_STRING
	{
		name = nextNode 2
		position = 128, 160+ fc.Select(fc.VerticalSpeed() < 0, 32, 0)
		startColor = 255, 0, 255, 255
		startWidth = 3
		loop = true
		vertex = 0, 0
		vertex = 176, 0
		vertex = 176, 32
		vertex = 0, 32
		variable = 1 - fc.VesselLanded()
	}
	TEXT
	{
		name = ApT
		position = 8,5
		textColor = 255, 255, 0, 255
		text = <=0:MET-dd:hh:mm:ss=> $#$ fc.TimeToAp()
		variable = 1 - fc.VesselLanded()
	}
	TEXT
	{
		name = PeT
		position = 8,6
		textColor = 255, 255, 0, 255
		text = <=0:MET-dd:hh:mm:ss=> $#$ fc.TimeToPe()
		variable = 1 - fc.VesselLanded()
	}
	TEXT
	{
		name = OT
		position = 8,7
		textColor = 255, 255, 0, 255
		text = <=0:MET-dd:hh:mm:ss=> $#$ fc.OrbitPeriod()
		variable = 1 - fc.VesselLanded()
	}
	TEXT
	{
		name = AnT
		position = 8,8
		textColor = 255, 255, 0, 255
		text = <=0:MET-dd:hh:mm:ss=> $#$ fc.TimeToANEq()
		variable = 1 - fc.VesselLanded()
	}
	TEXT
	{
		name = DnT
		position = 8,9
		textColor = 255, 255, 0, 255
		text = <=0:MET-dd:hh:mm:ss=> $#$ fc.TimeToDNEq()
		variable = 1 - fc.VesselLanded()
	}

	LINE_STRING
	{
		name = dividers
		position = -5, 320
		startColor = 255,255,255,255
		startWidth = 3
		vertex = 0, 0
		vertex = 650, 0
		vertex = 650, 64
		vertex = 0, 64
	}

	TEXT
	{
		name = no maneuver
		position = 14.5, 10.5
		textColor = 132, 132, 132, 255
		text = NO MANEUVER
		variable = 1 - fc.ManeuverNodeExists()
	}

	TEXT
	{
		name = maneuver static
		position = 2, 10
		textColor = 132, 132, 132, 255
		text = [hw]Node in T [/hw]   |    ΔV:   |  [hw]Est.Burn T[/hw]  | [hw]THROTTLE[/hw]
		variable = fc.ManeuverNodeExists()
	}
	TEXT
	{
		name = maneuver static 2
		position = 10, 11
		textColor = 132, 132, 132, 255
		text = |          |         |
		variable = fc.ManeuverNodeExists()
	}
	TEXT
	{
		name = timer
		position = 0,11
		textColor = 255, 255, 0, 255
		text = <=0,9:MET+h:mm:ss=>   <=1,9:0.0=>    [#81BEF7]<=2:METmm:ss=>   [#FE9A2E]<=3,5:P0=> $#$ fc.ManeuverNodeTime(); fc.ManeuverNodeDV(); fc.ManeuverNodeBurnTime(); fc.GetThrottle()
		variable = fc.ManeuverNodeExists()
	}

	TEXT
	{
		name = stage / deltaV static
		position = 0, 12
		text = ST.[#ff1111]<=0:00=>[#ffffff]|[#ffff00]ΔV[hw](St.) [/hw]:      [#ffffff]|     |[#ffff00]ΔV[hw](Tot.)[/hw] $#$ fc.CurrentStage()
	}
	TEXT
	{
		name = stage deltaV
		position = 12,12
		textColor = 255, 255, 0, 255
		text = <=0,6:0.0=> [hw]<=1:BAR,= ,10=>[/hw]       <=2,6:0.0=> $#$ fc.DeltaVStage(); fc.SafeDivide(fc.DeltaVStage(), fc.DeltaVStageMax()); fc.DeltaV()
	}

	TEXT
	{
		name = SoI change info
		position = 0,13
		text = <=0=> [#ffff00]<=1=> [#ffffff]AT [#ffff00]<=2:METy:ddd:hh:mm:ss=>$#$ fc.Select(fc.NextSoI() > 0, "TRANSFER", "  ESCAPE"); fc.NextBodyName(); fc.TimeToNextSoI() 
		variable = fc.NextSoI() ~= 0
	}

	TEXT
	{
		name = phase angle statics
		position = 0,14
		text = PHASE ANGLE:$$$         AT:
		variable = transfer.TimeUntilPhaseAngle() ~= 0
	}
	TEXT
	{
		name = phase angle
		position = 12, 14
		textColor = 255, 255, 0, 255
		text = <=0:0.00=>° $#$ transfer.RelativePhaseAngle()$$$<=0:MET-y:ddd:hh:mm:ss=> $#$ transfer.TimeUntilPhaseAngle()
		variable = transfer.TimeUntilPhaseAngle() ~= 0
	}
	TEXT
	{
		name = ejection angle statics
		position = 0,16
		text = EJECT ANGLE:$$$         AT:
		variable = transfer.TimeUntilEjection() ~= 0
	}
	TEXT
	{
		name = ejection angle
		position = 12, 16
		textColor = 255, 255, 0, 255
		text = <=0:0.00=>° $#$ transfer.RelativeEjectionAngle() $$$<=0:MET-y:ddd:hh:mm:ss=> $#$ transfer.TimeUntilEjection()
		variable = transfer.TimeUntilEjection() ~= 0
	}
	
	TEXT
	{
		position = 5, 18
		text = ΔV:[#ffff00]<=0,7:SIP##0.0=>m/s (<=1,6:SIP##0.0=>m/s) $#$ transfer.DeltaVInitial(); fc.DeltaV()
		variable = transfer.TimeUntilPhaseAngle() ~= 0
	}
}
